## 题意

把 $s$ 划分成若干段，使得每段都在 $\textit{wordDict}$ 中。

判断能否划分。

注意可以不划分，如果 $s$ 在 $\textit{wordDict}$ 中，则返回 $\texttt{true}$。

## 一、寻找子问题

例如 $s=\texttt{leetcode}$，枚举最后一段的长度：

- 长为 $1$，即子串 $\texttt{e}$，如果它在 $\textit{wordDict}$ 中，那么问题变成：能否把 $\texttt{leetcod}$ 划分成若干段，使得每段都在 $\textit{wordDict}$ 中？
- 长为 $2$，即子串 $\texttt{de}$，如果它在 $\textit{wordDict}$ 中，那么问题变成：能否把 $\texttt{leetco}$ 划分成若干段，使得每段都在 $\textit{wordDict}$ 中？
- 长为 $3$，即子串 $\texttt{ode}$，如果它在 $\textit{wordDict}$ 中，那么问题变成：能否把 $\texttt{leetc}$ 划分成若干段，使得每段都在 $\textit{wordDict}$ 中？
- 长为 $4$，即子串 $\texttt{code}$，如果它在 $\textit{wordDict}$ 中，那么问题变成：能否把 $\texttt{leet}$ 划分成若干段，使得每段都在 $\textit{wordDict}$ 中？
- ……

这些问题都是**和原问题相似的、规模更小的子问题**，可以用**递归**解决。

⚠**注意**：本题 $\textit{wordDict}$ 至多有 $1000$ 个字符串，但最多只有 $20$ 种不同的长度，所以应该枚举长度，而不是枚举 $\textit{wordDict}$ 中的字符串。

> 注：从右往左思考，主要是为了方便把递归翻译成递推。从左往右思考也是可以的。

## 二、状态定义与状态转移方程

根据上面的讨论，定义状态为 $\textit{dfs}(i)$，表示能否把前缀 $s[:i]$（表示 $s[0]$ 到 $s[i-1]$ 这段子串）划分成若干段，使得每段都在 $\textit{wordDict}$ 中。

枚举 $s[:i]$ 最后一段的长度：

- 长为 $1$，即子串 $s[i-1:i]$，如果它在 $\textit{wordDict}$ 中，那么问题变成：能否把前缀 $s[:i-1]$ 划分成若干段，使得每段都在 $\textit{wordDict}$ 中，即 $\textit{dfs}(i-1)$。
- 长为 $2$，即子串 $s[i-2:i]$，如果它在 $\textit{wordDict}$ 中，那么问题变成：能否把前缀 $s[:i-2]$ 划分成若干段，使得每段都在 $\textit{wordDict}$ 中，即 $\textit{dfs}(i-2)$。
- 长为 $3$，即子串 $s[i-3:i]$，如果它在 $\textit{wordDict}$ 中，那么问题变成：能否把前缀 $s[:i-3]$ 划分成若干段，使得每段都在 $\textit{wordDict}$ 中，即 $\textit{dfs}(i-3)$。
- ……

设 $\textit{wordDict}$ 中字符串的最长长度为 $\textit{maxLen}$，枚举的上限不超过 $\textit{maxLen}$，因为更长的子串必然不在 $\textit{wordDict}$ 中。

枚举 $j=i-1,i-2,i-3,\ldots,\max(i-\textit{maxLen},0)$，只要其中一个 $j$ 满足 $s[j:i]$ 在 $\textit{wordDict}$ 中且 $\textit{dfs}(j)=\texttt{true}$，那么 $\textit{dfs}(i)$ 就是 $\texttt{true}$。

**递归边界**：$\textit{dfs}(0)=\texttt{true}$。递归到空串，说明 $s$ 成功地划分完毕。

**递归入口**：$\textit{dfs}(n)$，也就是答案。

代码实现时，可以把 $\textit{wordDict}$ 列表转成一个哈希集合，便于快速判断子串是否在 $\textit{wordDict}$ 中。

## 三、递归搜索 + 保存递归返回值 = 记忆化搜索

考虑到整个递归过程中有大量重复递归调用（递归入参相同）。由于递归函数没有副作用，同样的入参无论计算多少次，算出来的结果都是一样的，因此可以用**记忆化搜索**来优化：

- 如果一个状态（递归入参）是第一次遇到，那么可以在返回前，把状态及其结果记到一个 $\textit{memo}$ 数组中。
- 如果一个状态不是第一次遇到（$\textit{memo}$ 中保存的结果不等于 $\textit{memo}$ 的初始值），那么可以直接返回 $\textit{memo}$ 中保存的结果。

**注意**：$\textit{memo}$ 数组的**初始值**一定不能等于要记忆化的值！例如初始值设置为 $0$（表示 $\texttt{false}$），并且要记忆化的 $\textit{dfs}(i)$ 也等于 $0$（表示 $\texttt{false}$），那就没法判断 $0$ 到底表示第一次遇到这个状态，还是表示之前遇到过了，从而导致记忆化失效。一般把初始值设置为 $-1$。

> Python 用户可以无视上面这段，直接用 `@cache` 装饰器。

具体请看视频讲解 [动态规划入门：从记忆化搜索到递推](https://www.bilibili.com/video/BV1Xj411K7oF/)，其中包含把记忆化搜索 1:1 翻译成递推的技巧。

* [sol-Python3]

```py
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        max_len = max(map(len, wordDict))  # 用于限制下面 j 的循环次数
        words = set(wordDict)  # 便于快速判断 s[j:i] in words

        @cache  # 缓存装饰器，避免重复计算 dfs 的结果（记忆化）
        def dfs(i: int) -> bool:
            if i == 0:  # 成功拆分！
                return True
            for j in range(i - 1, max(i - max_len - 1, -1), -1):
                if s[j:i] in words and dfs(j):
                    return True
            return False

        return dfs(len(s))
```

* [sol-Python3写法二]

```py
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        max_len = max(map(len, wordDict))  # 用于限制下面 j 的循环次数
        words = set(wordDict)  # 便于快速判断 s[j:i] in words

        @cache  # 缓存装饰器，避免重复计算 dfs 的结果（记忆化）
        def dfs(i: int) -> bool:
            if i == 0:  # 成功拆分！
                return True
            return any(s[j:i] in words and dfs(j)
                       for j in range(i - 1, max(i - max_len - 1, -1), -1))

        return dfs(len(s))
```

* [sol-Java]

```java
class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        int maxLen = 0;
        for (String word : wordDict) {
            maxLen = Math.max(maxLen, word.length());
        }
        Set<String> words = new HashSet<>(wordDict);

        int n = s.length();
        int[] memo = new int[n + 1];
        Arrays.fill(memo, -1); // -1 表示没有计算过
        return dfs(n, maxLen, s, words, memo) == 1;
    }

    private int dfs(int i, int maxLen, String s, Set<String> words, int[] memo) {
        if (i == 0) { // 成功拆分！
            return 1;
        }
        if (memo[i] != -1) { // 之前计算过
            return memo[i];
        }
        for (int j = i - 1; j >= Math.max(i - maxLen, 0); j--) {
            if (words.contains(s.substring(j, i)) && dfs(j, maxLen, s, words, memo) == 1) {
                return memo[i] = 1; // 记忆化
            }
        }
        return memo[i] = 0; // 记忆化
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        int max_len = ranges::max(wordDict, {}, &string::length).length();
        unordered_set<string> words(wordDict.begin(), wordDict.end());

        int n = s.length();
        vector<int> memo(n + 1, -1); // -1 表示没有计算过
        auto dfs = [&](this auto&& dfs, int i) -> bool {
            if (i == 0) { // 成功拆分！
                return true;
            }
            int& res = memo[i]; // 注意这里是引用
            if (res != -1) { // 之前计算过
                return res;
            }
            for (int j = i - 1; j >= max(i - max_len, 0); j--) {
                if (words.count(s.substr(j, i - j)) && dfs(j)) {
                    return res = true; // 记忆化
                }
            }
            return res = false; // 记忆化
        };
        return dfs(n);
    }
};
```

* [sol-Go]

```go
func wordBreak(s string, wordDict []string) bool {
    maxLen := 0
    words := make(map[string]bool, len(wordDict))
    for _, w := range wordDict {
        words[w] = true
        maxLen = max(maxLen, len(w))
    }

    n := len(s)
    memo := make([]int8, n+1)
    for i := range memo {
        memo[i] = -1 // -1 表示没有计算过
    }
    var dfs func(int) int8
    dfs = func(i int) (res int8) {
        if i == 0 { // 成功拆分！
            return 1
        }
        p := &memo[i]
        if *p != -1 { // 之前计算过
            return *p
        }
        defer func() { *p = res }() // 记忆化
        for j := i - 1; j >= max(i-maxLen, 0); j-- {
            if words[s[j:i]] && dfs(j) == 1 {
                return 1
            }
        }
        return 0
    }
    return dfs(n) == 1
}
```

* [sol-JavaScript]

```js
var wordBreak = function(s, wordDict) {
    const maxLen = Math.max(...wordDict.map(word => word.length));
    const words = new Set(wordDict);
    const memo = Array(s.length + 1);

    function dfs(i) {
        if (i === 0) { // 成功拆分！
            return true;
        }
        if (memo[i] !== undefined) { // 之前计算过
            return memo[i];
        }
        for (let j = i - 1; j >= Math.max(i - maxLen, 0); j--) {
            if (words.has(s.slice(j, i)) && dfs(j)) {
                return memo[i] = true; // 记忆化
            }
        }
        return memo[i] = false; // 记忆化
    }

    return dfs(s.length);
};
```

* [sol-Rust]

```rust
use std::collections::HashSet;

impl Solution {
    pub fn word_break(s: String, word_dict: Vec<String>) -> bool {
        fn dfs(i: usize, max_len: usize, s: &str, words: &HashSet<String>, memo: &mut Vec<i32>) -> bool {
            if i == 0 { // 成功拆分！
                return true;
            }
            if memo[i] != -1 { // 之前计算过
                return memo[i] == 1;
            }
            for j in (i.saturating_sub(max_len)..i).rev() {
                if words.contains(&s[j..i]) && dfs(j, max_len, s, words, memo) {
                    memo[i] = 1; // 记忆化
                    return true;
                }
            }
            memo[i] = 0; // 记忆化
            false
        }

        let max_len = word_dict.iter().map(|w| w.len()).max().unwrap();
        let words = word_dict.into_iter().collect::<HashSet<_>>();
        let n = s.len();
        let mut memo = vec![-1; n + 1]; // -1 表示没有计算过
        dfs(n, max_len, &s, &words, &mut memo)
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(mL + nL^2)$，其中 $m$ 是 $\textit{wordDict}$ 的长度，$L$ 是 $\textit{wordDict}$ 中字符串的最长长度，$n$ 是 $s$ 的长度。创建哈希集合需要 $\mathcal{O}(mL)$ 的时间。由于每个状态只会计算一次，动态规划的时间复杂度 $=$ 状态个数 $\times$ 单个状态的计算时间。本题状态个数等于 $\mathcal{O}(n)$，单个状态的计算时间为 $\mathcal{O}(L^2)$（注意判断子串是否在哈希集合中需要 $\mathcal{O}(L)$ 的时间），所以记忆化搜索的时间复杂度为 $\mathcal{O}(nL^2)$。
- 空间复杂度：$\mathcal{O}(mL+n)$。哈希集合需要 $\mathcal{O}(mL)$ 的空间。记忆化搜索需要 $\mathcal{O}(n)$ 的空间。

## 四、1:1 翻译成递推

我们可以去掉递归中的「递」，只保留「归」的部分，即自底向上计算。

具体来说，$f[i]$ 的定义和 $\textit{dfs}(i)$ 的定义是一样的，都表示能否把前缀 $s[:i]$（表示 $s[0]$ 到 $s[i-1]$）划分成若干段，使得每段都在 $\textit{wordDict}$ 中。

同样地，枚举 $j=i-1,i-2,i-3,\ldots,\max(i-\textit{maxLen},0)$，只要其中一个 $j$ 满足 $s[j:i]$ 在 $\textit{wordDict}$ 中且 $f[j]=\texttt{true}$，那么 $f[i]$ 就是 $\texttt{true}$。

初始值 $f[0]=\texttt{true}$，翻译自递归边界 $\textit{dfs}(0)=\texttt{true}$。

答案为 $f[n]$，翻译自递归入口 $\textit{dfs}(n)$。

* [sol-Python3]

```py
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        max_len = max(map(len, wordDict))  # 用于限制下面 j 的循环次数
        words = set(wordDict)  # 便于快速判断 s[j:i] in words

        n = len(s)
        f = [True] + [False] * n
        for i in range(1, n + 1):
            for j in range(i - 1, max(i - max_len - 1, -1), -1):
                if f[j] and s[j:i] in words:
                    f[i] = True
                    break
        return f[n]
```

* [sol-Python3写法二]

```py
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        max_len = max(map(len, wordDict))  # 用于限制下面 j 的循环次数
        words = set(wordDict)  # 便于快速判断 s[j:i] in words

        n = len(s)
        f = [True] + [False] * n
        for i in range(1, n + 1):
            f[i] = any(f[j] and s[j:i] in words
                       for j in range(i - 1, max(i - max_len - 1, -1), -1))
        return f[n]
```

* [sol-Java]

```java
class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        int maxLen = 0;
        for (String word : wordDict) {
            maxLen = Math.max(maxLen, word.length());
        }
        Set<String> words = new HashSet<>(wordDict);

        int n = s.length();
        boolean[] f = new boolean[n + 1];
        f[0] = true;
        for (int i = 1; i <= n; i++) {
            for (int j = i - 1; j >= Math.max(i - maxLen, 0); j--) {
                if (f[j] && words.contains(s.substring(j, i))) {
                    f[i] = true;
                    break;
                }
            }
        }
        return f[n];
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        int max_len = ranges::max(wordDict, {}, &string::length).length();
        unordered_set<string> words(wordDict.begin(), wordDict.end());

        int n = s.length();
        vector<int> f(n + 1);
        f[0] = true;
        for (int i = 1; i <= n; i++) {
            for (int j = i - 1; j >= max(i - max_len, 0); j--) {
                if (f[j] && words.count(s.substr(j, i - j))) {
                    f[i] = true;
                    break;
                }
            }
        }
        return f[n];
    }
};
```

* [sol-Go]

```go
func wordBreak(s string, wordDict []string) bool {
    maxLen := 0
    words := make(map[string]bool, len(wordDict))
    for _, w := range wordDict {
        words[w] = true
        maxLen = max(maxLen, len(w))
    }

    n := len(s)
    f := make([]bool, n+1)
    f[0] = true
    for i := 1; i <= n; i++ {
        for j := i - 1; j >= max(i-maxLen, 0); j-- {
            if f[j] && words[s[j:i]] {
                f[i] = true
                break
            }
        }
    }
    return f[n]
}
```

* [sol-JavaScript]

```js
var wordBreak = function(s, wordDict) {
    const maxLen = Math.max(...wordDict.map(word => word.length));
    const words = new Set(wordDict);

    const n = s.length;
    const f = Array(n + 1).fill(false);
    f[0] = true;
    for (let i = 1; i <= n; i++) {
        for (let j = i - 1; j >= Math.max(i - maxLen, 0); j--) {
            if (f[j] && words.has(s.slice(j, i))) {
                f[i] = true;
                break;
            }
        }
    }
    return f[n];
};
```

* [sol-Rust]

```rust
use std::collections::HashSet;

impl Solution {
    pub fn word_break(s: String, word_dict: Vec<String>) -> bool {
        let max_len = word_dict.iter().map(|w| w.len()).max().unwrap();
        let words = word_dict.into_iter().collect::<HashSet<_>>();

        let n = s.len();
        let mut f = vec![false; n + 1];
        f[0] = true;
        for i in 1..=n {
            for j in (i.saturating_sub(max_len)..i).rev() {
                if f[j] && words.contains(&s[j..i]) {
                    f[i] = true;
                    break;
                }
            }
        }
        f[n]
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(mL + nL^2)$，其中 $m$ 是 $\textit{wordDict}$ 的长度，$L$ 是 $\textit{wordDict}$ 中字符串的最长长度，$n$ 是 $s$ 的长度。理由同上。
- 空间复杂度：$\mathcal{O}(mL+n)$。

注：本题字符串比较短，可以直接用哈希集合判断。如果字符串比较长，可以用字典树加速。

更多相似题目，见 [动态规划题单](https://leetcode.cn/circle/discuss/tXLS3i/) 中的「**六、划分型 DP**」。

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口与双指针（定长/不定长/单序列/双序列/三指针/分组循环）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心与思维（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)
11. [链表、二叉树与回溯（前后指针/快慢指针/DFS/BFS/直径/LCA/一般树）](https://leetcode.cn/circle/discuss/K0n2gO/)
12. [字符串（KMP/Z函数/Manacher/字符串哈希/AC自动机/后缀数组/子序列自动机）](https://leetcode.cn/circle/discuss/SJFwQI/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
